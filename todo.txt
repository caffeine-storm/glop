tmckee:#46 write a test to make sure that the underlying format/parameters of
our textures match expectations; will be helpful for detecting wonky
differences between platforms. (Thanks @knortic!)

tmckee:#45 running our rendering pipeline with a software renderer seems to
produce 'crisper' results than running against the default renderer (backed by
hardware through d3d12) on WSL.

tmckee:#44 for some reasonâ„¢ running 'xvfb-run glxinfo -B' on WSL reports the
hardware renderer+driver while 'xvfb-run glxinfo -B' on Arch Linux reports a
software renderer. *confusion intensifies*

#42 generic cleanup
	- this is a tracking bug for remembering to do random cleanups and things
		- we're logging all the FBConfigs we encounter in the native code; let's
		  not

tmckee:#40 testing.T.{Fatalf,FailNow} exits the goroutine; defer'd closures run
but, because there is no panic, 'recover()' returns nil. This means that if
we're running render tests, we won't detect the failure so we won't get a
chance to 'enforceInvariants' to clean up gl state. This means if testA fails,
testB might get a wonky gl state and fail spuriously as a result. Such a
failure usually manifests as a failure in 'prep'. Also, calling runtime.Goexit
on the render thread is probably really bad if we're trying to reuse that
render queue; we can at least fail-fast by defer'ing a non-conditional close()
of the work channel.

tmckee:#38 improve failure attribution when things blow up on the render
thread. though, on second look, it seems we do have attribution? going to let
this bug sit for a while to not lose the context but it might be fixed r.n.

tmckee:#37 tracking bug for migrating from WithGlForTest to GlTest() family of
helpers. 

tmckee:#36 running `make testrunargs='-shuffle=on' test-nocache` should work;
ie. tests should pass regardless of which order they're run in

tmckee:#35 need a way to target distinct rejection files if two tests want to
re-use an expected file

tmckee:#29 shouldn't we be subtracting 'sys.start_ms' from the 'horizon' in system.System.Think() ?

tmckee:#28 text_edit_line.go is checking for a click but only checking the x
co-ordinate... would clicking below the box move the cursor??? need to test!

tmckee:#25 our timestamp code is scuffed in glop.cpp

tmckee:#24 gui.TextLine.next_text is never used; but is needed for detecting change-in-text in gui.TextEditLine

tmckee:#23 for X, we need to listen for MappingNotify events and
XRefreshKeyboardMapping() as needed
https://tronche.com/gui/x/xlib/utilities/keyboard/XRefreshKeyboardMapping.html

tmckee:#22 clicking the 'x' button on a window doesn't close it r.n. We need to
detect a "close message" or smth in glop.cpp.

----

tmckee:#15 refactor: move ShouldContainLog from render/rendertest/cmp_test.go to gloptest/

tmckee:#14 imgmanip/scale.go should sample neighbouring points when scaling by
non-integral amounts

tmckee:#12 gui tests are flaky when not running under xvfb

tmckee:#7 installed multilib support to get the build going; is it necessary?
- sudo apt install gcc-multilib g++-multilib
- can check what's needed to build from inside a fresh ubuntu docker container

----

tmckee:#3 port Haunts' "make update-appveyor-image" helper to glop

tmckee:#4 we need to change Dictionary to use 'constant' geometry and support positioning by offset through shader-uniform-variables.

----

tmckee:#5 opengl deprecated/removed GL_QUADS; we'll need to migrate away from
gl.QUADS

tmckee:#8 use type system to make initialization ordering constraints explicit
	- need to identify which modules/packages need this

tmckee:#10 in gos/linux/glop.cpp:
	case XK_slash: ki = '/'; break;
	case XK_space: ki = '/'; break;
	?? shouldn't that be a space, not a slash?

If windows is ok with giving up the main thread we should switch to doing
things with a Run() / Quit() mechanism instead of a for { Think() } mechanism.
Doing this would increase the number of mouse events on osx and would give
better resolution in the event of a long frame.

Make a way to test sprite stuff without needed opengl.

<owner>:#47 <next>
